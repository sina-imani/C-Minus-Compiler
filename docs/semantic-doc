IAWT


#ptoken		(push the just-seen token)
t = nexttemp()
type, index = scanner.get_last_token()
if type == ID:
	PB[i++] = (ASSIGN, SYMBOL_TABLE[index].address, t)
elif type == NUM:
	PB[i++] = (ASSIGN, #NUM, t)
else: ERROR
push(t)

#temp_exch	(exchange the address of the variable with an equivalent temporary)
ss:	..., &a
	..., t
t = nexttemp()
PB[i++] = (ASSIGN, &a, t)
pop()
push(t)

#pid		(push id)
type, index = scanner.get_last_token()
push(SYMBOL_TABLE[index].address)

#pplus		(push the + sign)
push(0)

#pminus 	(push the - sign)
push(1)

#pless		(push the < sign)
push(2)

#peq		(push the == sign)
push(3)

#assign
ss:	..., &a, t
	...
t, a = pop(2)
PB[i++] = (ASSIGN, t, a)

#assign_arr	(assign to a certain index of some array)
ss:	..., &a, t1, t2
	...
t2, t1, &a = pop(3)
PB[i++] = (MULT, t1, #4, t1)
PB[i++] = (ADD, t1, &a, t1)
PB[i++] = (ASSIGN, t2, @t1)

#do_op	(do the operation)
ss:	..., t1, op, t2
	..., t1
t2 = pop()
op = pop()
t1 = pop()
if (op == 0)  # addition
	PB[i++] = (ADD, t1, t2, t1)
if (op == 1)  # subtraction
	PB[i++] = (SUB, t1, t2, t1)
if (op == 2)  # less 
	PB[i++] = (LT, t1, t2, t1)
if (op == 3)  # equal
	PB[i++] = (EQ, t1, t2, t1)
push(t1)

#do_mult	(do multiplication)
ss:	..., t1, t2
	..., t1
t2, t1 = pop(2)
PB[i++] = (MULT, t1, t2, t1)
push(t1)
		
#eval_ind	(evaluate array cell using the given index)
ss:	..., t1, t2
	..., t1
t1, t2 = ss[top-1], ss[top]
PB[i++] = (MULT, t2, #4, t2)
PB[i++] = (ADD, t1, t2, t1) #todo: t1 += 4 * t2
PB[i++] = (ASSIGN, @t1, t1)
pop()



100	a=200
104	b=1
...
200	2
204	5
208	9
...
512(t1)	200
516(t2)	1




#eval_ind_orig	(evaluate array cell using the given index, where the array address is NOT a temporary)
ss:	..., &a, t
	..., t
t, &a = pop(2)
PB[i++] = (MULT, t, #4, t)
PB[i++] = (ADD, t, &a, t)
PB[i++] = (ASSIGN, @t, t)
push(t)

#make_patch
push(i)
i++

#end_if
ss:	..., t, 1, 3	(see the schematic)
	...
schematic:
0.	t = value of expression
1.	JPF (t, 4)
2.	code to be executed when cond is true
3.	JP  (5)
4.	code to be executed when cond is false
5.

a2, a1, t = pop(3)
PB[a2] = (JP, i)
PB[a1] = (JPF, t, a2+1)


#start_repeat
ss: ...
	..., i, 0
push(i)
push(0)

#break
ss:	..., i, b_1, ..., b_n, n
	..., i, b_1, ..., b_n, b_n+1, n+1
n = pop()
push(i++)
push(n+1)

#end_repeat
ss:	..., 0, b1=1, b2=3, 2, t	(see the schematic)
	...
schematic:
0.	code of statement
1.	break;
2.	code of statement
3.	break;
4.	code of statement
5.	t = value of expression
6.	JPF (t, 0)
7.

t = pop()
break_cnt = pop()
for j in range(break_cnt):
	break_addr = pop()
	PB[break_addr] = (JP, i+1)
a = pop()
PB[i++] = (JPF, t, a)


#call_output
ss:	..., a
	...
PB[i++] = (PRINT, pop())


#start_declaration		
scanner.start_declaration()

#start_params
scanner.start_params()

#end_declaration
scanner.set_declaration_mode(DISABLE)

#end_scope
scanner.end_scope()